{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","input","setInput","version","setVersion","title","setTitle","headings","setHeadings","internalLinks","setInternalLinks","externalLinks","setExternalLinks","internalLinksC","setInternalLinksC","externalLinksC","setExternalLinksC","showInt","setShowInt","showExt","setShowExt","form","setForm","inaccess","setInacess","loader","setLoader","class","id","href","src","alt","border","onSubmit","e","url","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","res","Version","Headings","InternalLinks","ExternalLinks","Internal","External","Inaccessible","Form","type","placeholder","onChange","target","value","className","aria-hidden","height","width","Object","keys","map","key","onClick","style","textDecoration","el","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15487bcf.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [version, setVersion] = useState('');\n  const [title, setTitle]= useState('');\n  const [headings,setHeadings] = useState('');\n  const [internalLinks, setInternalLinks] = useState([]);\n  const [externalLinks, setExternalLinks] = useState([]);\n  const [internalLinksC, setInternalLinksC] = useState('');\n  const [externalLinksC, setExternalLinksC] = useState('');\n  const [showInt, setShowInt] = useState(false)\n  const [showExt, setShowExt] = useState(false)\n  const [form, setForm] = useState('');\n  const [inaccess, setInacess] = useState ('');\n  const [loader, setLoader] = useState(false);\n  const baseURL = 'http://localhost:3001';\n\n\n  //Function that communicates to back-end server, where the entered URL is fetched and webpage scraped to get required details\n  //Promise chained with then to receive the response object from server and grab the details for rendering\n  function passURL (url) {\n    fetch(`${baseURL}/url`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body:JSON.stringify(url)\n    })\n    \n    .then(response => {\n      response.json()\n        .then(res =>{\n          setVersion(res.Version)\n          setTitle(res.title)\n          setHeadings(res.Headings)\n          setInternalLinks(res.InternalLinks)\n          setExternalLinks(res.ExternalLinks)\n          setInternalLinksC(res.Internal)\n          setExternalLinksC(res.External)\n          setInacess(res.Inaccessible)\n          setForm(res.Form)\n        })\n    })\n  }\n\n  //Function to handle an entry in the input field\n  function handleInputChange(e) {\n    setInput(e.target.value);\n    setLoader(false);\n  }\n\n  //Function which is called on input form submit, which triggers passURL function to back-end fetch\n  function handleSubmit (e) {\n    e.preventDefault();\n    passURL({input});\n    setLoader(true);\n    setTitle('')\n    setInput('');\n    setShowInt(false)\n    setShowExt(false)\n  }\n\n  function showInternalLinks () {\n   setShowInt(true)\n  }\n\n  function showExternalLinks () {\n    setShowExt(true)\n   }\n\n   //Rendering of data on application\n  return (\n    <>\n    <div class = \"header\" id=\"myHeader\">\n      <a href=\"https://fontmeme.com/fonts/aliandra-font/\">\n        <img src=\"https://fontmeme.com/permalink/201021/6ab07ccef3fa5cde287c0cf6424ea09c.png\" alt=\"aliandra-font\" border=\"0\"/>\n      </a>  \n    </div>\n\n    <div id = \"search\">\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" id = \"input\" placeholder=\"Enter your URL here\" onChange={handleInputChange}></input>\n        <button id= \"submit\" type=\"submit\">Submit</button>\n      </form>\n    </div>\n\n   {/*To load fetcher icon during processing data */}\n    {loader && !title && (\n      <>\n      <div className= \"loading\">\n        <h3 className=\"loader\">Fetching...</h3>\n        <i class=\"fa fa-spinner fa-spin fa-5x fa-fw\" aria-hidden=\"true\" height=\"100\" width=\"100\"></i>\n      </div>\n      </>\n    )}\n\n    {/*Rendering of data in table format */}  \n    {title && (\n      <div className=\"output-content\">\n        <table>\n          <tr>\n            <th>Property</th>\n            <th>Value from webpage</th>\n          </tr>\n          <tr>\n            <td>HTML Version</td>\n            <td>{version}</td> \n          </tr>\n          <tr>\n            <td>Title of webpage:</td>\n            <td>{title}</td> \n          </tr>\n          <tr>\n            <td>Headings by level: </td>\n              <td>\n                <ul className = \"heading-list\">\n                  {Object.keys(headings).map((key,value) => {\n                    return (\n                    <li>{key} : {headings[key]}</li>\n                    )\n                  })\n                  }              \n                </ul>\n              </td>\n          </tr>\n          <tr>\n            <td>Internal links on webpage </td>\n            <td>{internalLinksC}\n              <button onClick= {showInternalLinks}>Show</button>\n            </td> \n          </tr>\n          <tr>\n            <td>External links on webpage</td>\n            <td>{externalLinksC}\n              <button onClick= {showExternalLinks}>Show</button>\n            </td> \n          </tr>\n          <tr>\n            <td>Inaccessible links on webpage </td>\n            <td>{inaccess}</td> \n          </tr>\n          <tr>\n            <td>Forms on page </td>\n            <td>{form}</td> \n          </tr>\n        </table>    \n      </div>\n    )}\n\n  {/* To render list of internal and external links when user submits the show button*/}\n    {showInt &&  title && (\n      <div class = \"links-display\">\n        <h3 style={{textDecoration:'underline'}}>List of Internal Links</h3>\n        <ul>\n        {internalLinks.map(el => {\n          return (\n            <li><a href={el}>{el}</a></li>\n          )\n        })}\n        </ul>\n      </div>\n    )}\n\n     {showExt &&  title && (\n      <div class = \"links-display\">\n        <h3 style={{textDecoration:'underline'}}>List of External Links</h3>\n        <ul>\n        {externalLinks.map(el => {\n          return (\n            <li><a href={el}>{el}</a></li>\n\n          )\n        })}\n        </ul>\n      </div>\n    )}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}